package tags

import (
	"testing"

	"github.com/ProtonMail/go-crypto/openpgp/packet"
	"github.com/goark/gpgpdump/parse/context"
	"github.com/goark/gpgpdump/parse/reader"
	"github.com/goark/gpgpdump/parse/values"
)

var (
	tag14Body1 = []byte{0x04, 0x36, 0x5d, 0x5c, 0x4c, 0x10, 0x08, 0x00, 0xf6, 0x42, 0x57, 0xb7, 0x08, 0x7f, 0x08, 0x17, 0x72, 0xa2, 0xba, 0xd6, 0xa9, 0x42, 0xf3, 0x05, 0xe8, 0xf9, 0x53, 0x11, 0x39, 0x4f, 0xb6, 0xf1, 0x6e, 0xb9, 0x4b, 0x38, 0x20, 0xda, 0x01, 0xa7, 0x56, 0xa3, 0x14, 0xe9, 0x8f, 0x40, 0x55, 0xf3, 0xd0, 0x07, 0xc6, 0xcb, 0x43, 0xa9, 0x94, 0xad, 0xf7, 0x4c, 0x64, 0x86, 0x49, 0xf8, 0x0c, 0x83, 0xbd, 0x65, 0xe9, 0x17, 0xd4, 0xa1, 0xd3, 0x50, 0xf8, 0xf5, 0x59, 0x5f, 0xdc, 0x76, 0x52, 0x4f, 0x3d, 0x3d, 0x8d, 0xdb, 0xce, 0x99, 0xe1, 0x57, 0x92, 0x59, 0xcd, 0xfd, 0xb8, 0xae, 0x74, 0x4f, 0xc5, 0xfc, 0x76, 0xbc, 0x83, 0xc5, 0x47, 0x30, 0x61, 0xce, 0x7c, 0xc9, 0x66, 0xff, 0x15, 0xf9, 0xbb, 0xfd, 0x91, 0x5e, 0xc7, 0x01, 0xaa, 0xd3, 0x5b, 0x9e, 0x8d, 0xa0, 0xa5, 0x72, 0x3a, 0xd4, 0x1a, 0xf0, 0xbf, 0x46, 0x00, 0x58, 0x2b, 0xe5, 0xf4, 0x88, 0xfd, 0x58, 0x4e, 0x49, 0xdb, 0xcd, 0x20, 0xb4, 0x9d, 0xe4, 0x91, 0x07, 0x36, 0x6b, 0x33, 0x6c, 0x38, 0x0d, 0x45, 0x1d, 0x0f, 0x7c, 0x88, 0xb3, 0x1c, 0x7c, 0x5b, 0x2d, 0x8e, 0xf6, 0xf3, 0xc9, 0x23, 0xc0, 0x43, 0xf0, 0xa5, 0x5b, 0x18, 0x8d, 0x8e, 0xbb, 0x55, 0x8c, 0xb8, 0x5d, 0x38, 0xd3, 0x34, 0xfd, 0x7c, 0x17, 0x57, 0x43, 0xa3, 0x1d, 0x18, 0x6c, 0xde, 0x33, 0x21, 0x2c, 0xb5, 0x2a, 0xff, 0x3c, 0xe1, 0xb1, 0x29, 0x40, 0x18, 0x11, 0x8d, 0x7c, 0x84, 0xa7, 0x0a, 0x72, 0xd6, 0x86, 0xc4, 0x03, 0x19, 0xc8, 0x07, 0x29, 0x7a, 0xca, 0x95, 0x0c, 0xd9, 0x96, 0x9f, 0xab, 0xd0, 0x0a, 0x50, 0x9b, 0x02, 0x46, 0xd3, 0x08, 0x3d, 0x66, 0xa4, 0x5d, 0x41, 0x9f, 0x9c, 0x7c, 0xbd, 0x89, 0x4b, 0x22, 0x19, 0x26, 0xba, 0xab, 0xa2, 0x5e, 0xc3, 0x55, 0xe9, 0x32, 0x0b, 0x3b, 0x00, 0x02, 0x02, 0x08, 0x00, 0x92, 0x3d, 0x6f, 0xbd, 0xe5, 0x68, 0x5a, 0x17, 0xd2, 0x85, 0x4f, 0x64, 0xa5, 0x2e, 0x28, 0x57, 0x82, 0x37, 0x00, 0x59, 0xd1, 0x4d, 0x77, 0x38, 0xdd, 0xea, 0x88, 0xaf, 0xb2, 0x46, 0x46, 0x9b, 0x7c, 0x6c, 0xb6, 0x62, 0xd8, 0x4b, 0x25, 0x44, 0x00, 0xdf, 0xe9, 0x43, 0xe3, 0xc3, 0x46, 0xac, 0x9f, 0x63, 0xde, 0x89, 0xd6, 0x99, 0x0a, 0xfe, 0x8f, 0x01, 0x61, 0x53, 0x42, 0xd5, 0x0b, 0xe1, 0x3f, 0xa9, 0xb9, 0x37, 0x0d, 0x52, 0x75, 0xbe, 0x17, 0xb9, 0xfa, 0x74, 0xd7, 0xd4, 0x41, 0xa5, 0xc2, 0xde, 0xe9, 0x7f, 0xab, 0x18, 0xaa, 0xea, 0xbb, 0xd4, 0x51, 0x82, 0x98, 0xcb, 0x9e, 0x8a, 0x7c, 0x43, 0xf9, 0x4e, 0x58, 0x0f, 0x22, 0x72, 0x00, 0xeb, 0x52, 0x7b, 0x3d, 0xe1, 0xcc, 0x41, 0xcf, 0x06, 0x00, 0x65, 0x85, 0x92, 0xac, 0x28, 0x73, 0xe2, 0xba, 0xe3, 0xe2, 0x58, 0xe0, 0xe2, 0xe4, 0xdd, 0xdd, 0xcc, 0xaa, 0xa4, 0xde, 0x6c, 0x0e, 0x83, 0x75, 0xfd, 0x1d, 0xfc, 0x6e, 0xb5, 0x0f, 0x56, 0xa4, 0xc8, 0xdf, 0x73, 0xe3, 0x20, 0x88, 0x57, 0x6f, 0x25, 0x13, 0xc1, 0x9e, 0x92, 0x3a, 0xa6, 0x83, 0x1f, 0x99, 0x11, 0xac, 0x42, 0x9c, 0xe9, 0xba, 0xf1, 0xda, 0x4d, 0x17, 0xd7, 0x70, 0x17, 0x33, 0xf5, 0x63, 0xb9, 0xc5, 0xf6, 0x26, 0xfc, 0xd0, 0xa7, 0x8b, 0x27, 0x09, 0x08, 0x4f, 0x0b, 0xbb, 0xd6, 0x72, 0x6b, 0x68, 0x90, 0xe9, 0x1d, 0x1a, 0x74, 0xe1, 0xbd, 0xb2, 0x73, 0x88, 0x16, 0x93, 0x36, 0xfa, 0x6a, 0x7b, 0x93, 0x9d, 0x77, 0xf4, 0xd2, 0xe7, 0x33, 0x7e, 0x99, 0x7a, 0x3a, 0x2c, 0xfd, 0xf3, 0x06, 0x54, 0xf5, 0x48, 0xb8, 0x45, 0xa9, 0xc8, 0xbf, 0xbe, 0x5d, 0x36, 0x09, 0xc3, 0x53, 0x24, 0xd0, 0xda, 0x22, 0x1a, 0x05, 0x7a, 0xdc, 0x40, 0x37, 0xf0, 0xb0}
)

const (
	tag14Result1 = `Public-Subkey Packet (tag 14) (525 bytes)
	04 36 5d 5c 4c 10 08 00 f6 42 57 b7 08 7f 08 17 72 a2 ba d6 a9 42 f3 05 e8 f9 53 11 39 4f b6 f1 6e b9 4b 38 20 da 01 a7 56 a3 14 e9 8f 40 55 f3 d0 07 c6 cb 43 a9 94 ad f7 4c 64 86 49 f8 0c 83 bd 65 e9 17 d4 a1 d3 50 f8 f5 59 5f dc 76 52 4f 3d 3d 8d db ce 99 e1 57 92 59 cd fd b8 ae 74 4f c5 fc 76 bc 83 c5 47 30 61 ce 7c c9 66 ff 15 f9 bb fd 91 5e c7 01 aa d3 5b 9e 8d a0 a5 72 3a d4 1a f0 bf 46 00 58 2b e5 f4 88 fd 58 4e 49 db cd 20 b4 9d e4 91 07 36 6b 33 6c 38 0d 45 1d 0f 7c 88 b3 1c 7c 5b 2d 8e f6 f3 c9 23 c0 43 f0 a5 5b 18 8d 8e bb 55 8c b8 5d 38 d3 34 fd 7c 17 57 43 a3 1d 18 6c de 33 21 2c b5 2a ff 3c e1 b1 29 40 18 11 8d 7c 84 a7 0a 72 d6 86 c4 03 19 c8 07 29 7a ca 95 0c d9 96 9f ab d0 0a 50 9b 02 46 d3 08 3d 66 a4 5d 41 9f 9c 7c bd 89 4b 22 19 26 ba ab a2 5e c3 55 e9 32 0b 3b 00 02 02 08 00 92 3d 6f bd e5 68 5a 17 d2 85 4f 64 a5 2e 28 57 82 37 00 59 d1 4d 77 38 dd ea 88 af b2 46 46 9b 7c 6c b6 62 d8 4b 25 44 00 df e9 43 e3 c3 46 ac 9f 63 de 89 d6 99 0a fe 8f 01 61 53 42 d5 0b e1 3f a9 b9 37 0d 52 75 be 17 b9 fa 74 d7 d4 41 a5 c2 de e9 7f ab 18 aa ea bb d4 51 82 98 cb 9e 8a 7c 43 f9 4e 58 0f 22 72 00 eb 52 7b 3d e1 cc 41 cf 06 00 65 85 92 ac 28 73 e2 ba e3 e2 58 e0 e2 e4 dd dd cc aa a4 de 6c 0e 83 75 fd 1d fc 6e b5 0f 56 a4 c8 df 73 e3 20 88 57 6f 25 13 c1 9e 92 3a a6 83 1f 99 11 ac 42 9c e9 ba f1 da 4d 17 d7 70 17 33 f5 63 b9 c5 f6 26 fc d0 a7 8b 27 09 08 4f 0b bb d6 72 6b 68 90 e9 1d 1a 74 e1 bd b2 73 88 16 93 36 fa 6a 7b 93 9d 77 f4 d2 e7 33 7e 99 7a 3a 2c fd f3 06 54 f5 48 b8 45 a9 c8 bf be 5d 36 09 c3 53 24 d0 da 22 1a 05 7a dc 40 37 f0 b0
	Version: 4 (current)
		04
	Public key creation time: 1998-11-26T13:49:00Z
		36 5d 5c 4c
	Public-key Algorithm: Elgamal (Encrypt-Only) (pub 16)
		10
	ElGamal prime p (2048 bits)
		f6 42 57 b7 08 7f 08 17 72 a2 ba d6 a9 42 f3 05 e8 f9 53 11 39 4f b6 f1 6e b9 4b 38 20 da 01 a7 56 a3 14 e9 8f 40 55 f3 d0 07 c6 cb 43 a9 94 ad f7 4c 64 86 49 f8 0c 83 bd 65 e9 17 d4 a1 d3 50 f8 f5 59 5f dc 76 52 4f 3d 3d 8d db ce 99 e1 57 92 59 cd fd b8 ae 74 4f c5 fc 76 bc 83 c5 47 30 61 ce 7c c9 66 ff 15 f9 bb fd 91 5e c7 01 aa d3 5b 9e 8d a0 a5 72 3a d4 1a f0 bf 46 00 58 2b e5 f4 88 fd 58 4e 49 db cd 20 b4 9d e4 91 07 36 6b 33 6c 38 0d 45 1d 0f 7c 88 b3 1c 7c 5b 2d 8e f6 f3 c9 23 c0 43 f0 a5 5b 18 8d 8e bb 55 8c b8 5d 38 d3 34 fd 7c 17 57 43 a3 1d 18 6c de 33 21 2c b5 2a ff 3c e1 b1 29 40 18 11 8d 7c 84 a7 0a 72 d6 86 c4 03 19 c8 07 29 7a ca 95 0c d9 96 9f ab d0 0a 50 9b 02 46 d3 08 3d 66 a4 5d 41 9f 9c 7c bd 89 4b 22 19 26 ba ab a2 5e c3 55 e9 32 0b 3b
	ElGamal group generator g (2 bits)
		02
	ElGamal public key value y (= g^x mod p where x is secret) (2048 bits)
		92 3d 6f bd e5 68 5a 17 d2 85 4f 64 a5 2e 28 57 82 37 00 59 d1 4d 77 38 dd ea 88 af b2 46 46 9b 7c 6c b6 62 d8 4b 25 44 00 df e9 43 e3 c3 46 ac 9f 63 de 89 d6 99 0a fe 8f 01 61 53 42 d5 0b e1 3f a9 b9 37 0d 52 75 be 17 b9 fa 74 d7 d4 41 a5 c2 de e9 7f ab 18 aa ea bb d4 51 82 98 cb 9e 8a 7c 43 f9 4e 58 0f 22 72 00 eb 52 7b 3d e1 cc 41 cf 06 00 65 85 92 ac 28 73 e2 ba e3 e2 58 e0 e2 e4 dd dd cc aa a4 de 6c 0e 83 75 fd 1d fc 6e b5 0f 56 a4 c8 df 73 e3 20 88 57 6f 25 13 c1 9e 92 3a a6 83 1f 99 11 ac 42 9c e9 ba f1 da 4d 17 d7 70 17 33 f5 63 b9 c5 f6 26 fc d0 a7 8b 27 09 08 4f 0b bb d6 72 6b 68 90 e9 1d 1a 74 e1 bd b2 73 88 16 93 36 fa 6a 7b 93 9d 77 f4 d2 e7 33 7e 99 7a 3a 2c fd f3 06 54 f5 48 b8 45 a9 c8 bf be 5d 36 09 c3 53 24 d0 da 22 1a 05 7a dc 40 37 f0 b0
`
)

func TestTag14(t *testing.T) {
	testCases := []struct {
		tag     uint8
		content []byte
		ktm     []byte
		cxt     context.SymAlgMode
		res     string
	}{
		{tag: 14, content: tag14Body1, ktm: nil, cxt: context.ModeNotSpecified, res: tag14Result1},
	}

	for _, tc := range testCases {
		op := &packet.OpaquePacket{Tag: tc.tag, Contents: tc.content}
		cxt := context.New(
			context.Set(context.DEBUG, true),
			context.Set(context.GDUMP, true),
			context.Set(context.INTEGER, true),
			context.Set(context.LITERAL, true),
			context.Set(context.MARKER, true),
			context.Set(context.PRIVATE, true),
			context.Set(context.UTC, true),
		)
		if tc.ktm != nil {
			tm, _ := values.NewDateTime(reader.New(tc.ktm), cxt.UTC())
			cxt.KeyCreationTime = tm
		}
		i, err := NewTag(op, cxt).Parse()
		if err != nil {
			t.Errorf("NewTag() = %v, want nil error.", err)
			return
		}
		if cxt.AlgMode() != tc.cxt {
			t.Errorf("Options.Mode = %v, want \"%v\".", cxt.AlgMode(), tc.cxt)
		}
		res := i.String()
		if res != tc.res {
			t.Errorf("Tag.String = \"%s\", want \"%s\".", res, tc.res)
		}
	}
}

/* Copyright 2017 Spiegel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
