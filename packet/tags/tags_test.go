package tags

import (
	"testing"

	"github.com/spiegel-im-spiegel/gpgpdump/options"
	"github.com/spiegel-im-spiegel/gpgpdump/packet/context"

	openpgp "golang.org/x/crypto/openpgp/packet"
)

var (
	tag01Body = []byte{0x03, 0xee, 0x06, 0x6b, 0xfe, 0x25, 0x2c, 0x4d, 0x79, 0x12, 0x02, 0x03, 0x04, 0xc3, 0xe7, 0xd7, 0x2b, 0xaf, 0x25, 0x2a, 0x19, 0xf6, 0x27, 0x80, 0xea, 0x7c, 0x4f, 0x6d, 0xca, 0x61, 0x22, 0x5a, 0xe3, 0xad, 0x0c, 0xfb, 0xd9, 0xa2, 0xd5, 0xa4, 0x30, 0x9a, 0xf3, 0xee, 0x34, 0x54, 0xae, 0xa8, 0xf6, 0x46, 0xac, 0x8a, 0xae, 0x38, 0xa6, 0x4f, 0xf3, 0xf2, 0xee, 0x30, 0x40, 0x62, 0x5b, 0x07, 0xe7, 0x2b, 0xee, 0x9a, 0x90, 0xd4, 0x6f, 0x1e, 0xd7, 0xc3, 0x26, 0x21, 0xab, 0x30, 0x4a, 0xfe, 0x88, 0xa2, 0x9f, 0x0e, 0xab, 0xf3, 0xbe, 0x7a, 0x89, 0x27, 0x32, 0x38, 0xb8, 0x06, 0x75, 0xfc, 0xac, 0x3c, 0xd4, 0xba, 0x0f, 0x49, 0x64, 0x15, 0xaa, 0x48, 0x9a, 0xdb, 0xc1, 0x8a, 0x7b, 0x11, 0x76, 0xfb, 0x2f, 0xef, 0xef, 0xb0, 0x29, 0xa9, 0x24, 0x75, 0x6d, 0x69, 0x12, 0x4d}
	tag02Body = []byte{0x04, 0x01, 0x13, 0x08, 0x00, 0x06, 0x05, 0x02, 0x54, 0xc3, 0x08, 0xdf, 0x00, 0x0a, 0x09, 0x10, 0x31, 0xfb, 0xfd, 0xa9, 0x5f, 0xbb, 0xfa, 0x18, 0x36, 0x1f, 0x01, 0x00, 0xea, 0x1d, 0xa2, 0x14, 0x5b, 0x82, 0x06, 0xfd, 0xd5, 0xae, 0xc4, 0x9f, 0xd8, 0x14, 0x44, 0x41, 0xa4, 0xf5, 0x4f, 0x56, 0x69, 0xad, 0x9a, 0xb0, 0x44, 0xf3, 0xa3, 0x88, 0xb2, 0x60, 0xf4, 0x0c, 0x00, 0xfc, 0x0a, 0xd3, 0xc0, 0x23, 0xf3, 0xed, 0xcd, 0xaf, 0x9b, 0x19, 0x6f, 0xee, 0xc4, 0x65, 0x44, 0xb5, 0x08, 0xe8, 0x27, 0x6c, 0x3a, 0xa8, 0x6e, 0x3b, 0x52, 0x9f, 0x61, 0x7a, 0xea, 0xee, 0x27, 0x48}
)

var (
	tag01Name = "Public-Key Encrypted Session Key Packet (tag 1)"
	tag02Name = "Signature Packet (tag 2)"
)

func TestTag01(t *testing.T) {
	op := &openpgp.OpaquePacket{Tag: 1, Contents: tag01Body}
	cxt := context.NewContext(options.New())
	i, err := NewTag(op, cxt).Parse()
	if err != nil {
		t.Errorf("NewTag() = %v, want nil error.", err)
		return
	}
	if i.Name != "Packet" {
		t.Errorf("Tag.Name = \"%s\", want \"Packet\".", i.Name)
	}
	if i.Value != tag01Name {
		t.Errorf("Tag.Value = \"%s\", want \"%s\".", i.Value, tag01Name)
	}
	if i.Note != "126 bytes" {
		t.Errorf("Tag.Note = \"%s\", want \"126 bytes\"", i.Note)
	}
	if i.Dump != "" {
		t.Errorf("Tag.Dump = \"%s\", want \"\".", i.Dump)
	}
}

func TestTag02(t *testing.T) {
	op := &openpgp.OpaquePacket{Tag: 2, Contents: tag02Body}
	cxt := context.NewContext(options.New())
	i, err := NewTag(op, cxt).Parse()
	if err != nil {
		t.Errorf("NewTag() = %v, want nil error.", err)
		return
	}
	if i.Name != "Packet" {
		t.Errorf("Tag.Name = \"%s\", want \"Packet\".", i.Name)
	}
	if i.Value != tag02Name {
		t.Errorf("Tag.Value = \"%s\", want \"%s\".", i.Value, tag02Name)
	}
	if i.Note != "94 bytes" {
		t.Errorf("Tag.Note = \"%s\", want \"94 bytes\"", i.Note)
	}
	if i.Dump != "" {
		t.Errorf("Tag.Dump = \"%s\", want \"\".", i.Dump)
	}
}

func TestTagUnknown(t *testing.T) {
	op := &openpgp.OpaquePacket{Tag: 99, Contents: []byte{0x01, 0x02, 0x03, 0x04}}
	cxt := context.NewContext(options.New(
		options.Set(options.DebugOpt, true),
	))
	name := "Unknown (tag 99)"
	i, err := NewTag(op, cxt).Parse()
	if err != nil {
		t.Errorf("NewTag() = %v, want nil error.", err)
		return
	}
	if i.Name != "Packet" {
		t.Errorf("Tag.Name = \"%s\", want \"Packet\".", i.Name)
	}
	if i.Value != name {
		t.Errorf("Tag.Value = \"%s\", want \"%s\".", i.Value, name)
	}
	if i.Note != "4 bytes" {
		t.Errorf("Tag.Note = \"%s\", want \"4 bytes\"", i.Note)
	}
	if i.Dump != "01 02 03 04" {
		t.Errorf("Tag.Dump = \"%s\", want \"01 02 03 04\".", i.Dump)
	}
}

/* Copyright 2017 Spiegel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
